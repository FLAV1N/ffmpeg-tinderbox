name: Win64 Artifact Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *' # Runs at 06:00 Tokyo time every day
  push:
    paths-ignore:
      - 'LICENSE'
      - '**.md'

jobs:
  build_base:
    name: Build base image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_ACTOR,,}/base:latest"

      - name: Pull latest
        run: docker pull ${{ steps.imagename.outputs.name }} || true

      - name: Build base image
        run: |
          docker build \
            --pull \
            --cache-from ${{ steps.imagename.outputs.name }} \
            --tag ${{ steps.imagename.outputs.name }} \
            images/base
      
      - name: Push base image
        run: docker push ${{ steps.imagename.outputs.name }}

  build_target_bases:
    name: Build target base image
    needs: build_base
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Image Name
        id: imagename
        run: echo "::set-output name=name::ghcr.io/${GITHUB_ACTOR,,}/base-${{ matrix.target }}:latest"

      - name: Pull latest
        run: docker pull ${{ steps.imagename.outputs.name }} || true

      - name: Build target base image
        run: |
          docker build \
            --pull \
            --build-arg GH_OWNER=${GITHUB_ACTOR,,} \
            --cache-from ${{ steps.imagename.outputs.name }} \
            --tag ${{ steps.imagename.outputs.name }} \
            images/base-${{ matrix.target }}

      - name: Push target base image
        run: docker push ${{ steps.imagename.outputs.name }}

  build_targets:
    name: Build target-variant image
    needs: build_target_bases
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
        variant: [nonfree]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Image Name
        id: imagename
        run: |
          IMG="ghcr.io/${GITHUB_ACTOR,,}/${{ matrix.target }}-${{ matrix.variant }}:latest"
          echo "::set-output name=name::${IMG/ /-}"

      - name: Pull latest
        run: docker pull ${{ steps.imagename.outputs.name }} || true
      
      - name: Build variant image
        run: |
          docker build \
            --pull \
            --cache-from ${{ steps.imagename.outputs.name }} \
            --tag ${{ steps.imagename.outputs.name }} \
            .

      - name: Push variant image
        run: docker push ${{ steps.imagename.outputs.name }}

  build_ffmpeg:
    name: Build ffmpeg
    needs: build_targets
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target: [win64]
        variant: [nonfree]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.dodosolsollalasol }}

      - name: Build ffmpeg
        run: ./build.sh ${{ matrix.target }} ${{ matrix.variant }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ffmpeg
          path: artifacts/*

  publish_release:
    name: Publish release
    needs: build_ffmpeg
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg
          path: artifacts

      - name: Set environment variables
        run: |
          echo "DATE=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "REV=$(basename artifacts/*.7z | awk -F '-' '{print substr($4,2)}')" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "r${{ github.run_number }}"
          release_name: "Build ${{ env.DATE }} @ ${{ env.REV }}"
          body: |
            Built from https://github.com/FFmpeg/FFmpeg/commit/${{ env.REV }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/*.7z
